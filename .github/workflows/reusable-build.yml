name: Reusable build workflow

on:
  workflow_call:
    inputs:
      configuration:
        required: false
        type: string
        default: Release
      publish_artifacts:
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        required: true

jobs:
  build:
    name: Validate core functionality
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ github.token }}

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      
    - name: Start analyzation with SonarCloud
      run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"TryAtSoftware_Equalizer" /o:"tryatsoftware" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

    - name: Restore dependencies
      run: dotnet restore
    - name: Build the solution
      run: dotnet build --no-restore --configuration "${{ inputs.configuration }}"
    - name: Test the solution
      run: dotnet test --no-build --configuration "${{ inputs.configuration }}" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
    
    - name: Finalize analyzation with SonarCloud
      run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
    - name: Publish projects
      if: ${{ inputs.publish_artifacts }}
      run: dotnet publish --no-build --configuration "${{ inputs.configuration }}" --output "./_artifacts"
    
    - name: Upload artifacts
      if: ${{ inputs.publish_artifacts }}
      uses: actions/upload-artifact@v2
      with:
        name: equalizer_projects
        path: "./_artifacts"
